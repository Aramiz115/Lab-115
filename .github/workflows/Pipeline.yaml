name: Prueba final

on: 
  push:
      branches:
       - main

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: "Obteniendo ultima versio del codigo"
        uses: actions/checkout@v3

      - name: "Instalacion de Java"
        uses: actions/setup-java@v3
        with:
          distribution: "temurin"
          java-version: "17"

      - name: "Compilacion"    
        run: ./mvnw clean install

      - name: "Verificar paquete"
        run: ls -ltra target

      - name: "Crear imagen de Docker"
        run: docker build -t prueba ./

      - name: "Configurar credenciales aws"
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.SECRET_KEY}}
          aws-region: ${{ secrets.REGION}}

      - name: "Cargar imagen a ECR"
        run: |
          aws ecr-public get-login-password --region us-east-1 | docker login --username AWS --password-stdin public.ecr.aws/j5p1t7g6
          docker build -t final .
          docker tag final:latest public.ecr.aws/j5p1t7g6/final:latest
          docker push public.ecr.aws/j5p1t7g6/final:latest

      - name: "Aprovicionamiento de terraform"
        run: |
          terraform -chdir=./Terraform/ init
          terraform -chdir=./Terraform/ validate
          terraform -chdir=./Terraform/ plan -out plan
          terraform -chdir=./Terraform/ apply plan

      - name: "Ejecutar ansible"
        env:
          PRIVATE_KEY: ${{ secrets.PEM}}
        run: |
          sudo apt update
          sudo apt install -y ansible
          cd Ansible
          echo "$PRIVATE_KEY" >> $HOME/Prueba.pem
          sudo chmod 600 $HOME/Prueba.pem
          var_IP=$(terraform -chdir=../Terraform/ output | grep "My_ip =" | tail -1 | cut -d '"' -f 2)
          sed -i "s/INSTANCIA/$var_IP/" inventario
          export ANSIBLE_HOST_KEY_CHECKING=False
          sudo ansible-playbook -i inventario server.yaml --become --private-key $HOME/Prueba.pem
        continue-on-error: true  
     
     - name: "Descargar arachni"
       run: |
         wget https://github.com/Arachni/arachni/releases/download/v1.6.1.3/arachni-1.6.1.3-0.6.1.1-linux-x86_64.tar.gz
         tar -xvf arachni-1.6.1.3-0.6.1.1-linux-x86_64.tar.gz
     
     - name: "Ejecutar arachni"
        run: |
              var_IP=$(terraform -chdir=Terraform/ output | grep "My_ip =" | tail -1 | cut -d '"' -f 2)
              ./arachni-1.6.1.3-0.6.1.1/bin/arachni --check=* http://$var_IP:8080/WebGoat/login
     
      - name: "Tirar infra"
        run: |
          cd Terraform/
          terraform plan -destroy -out plan
          terraform apply plan